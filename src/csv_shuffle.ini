# The parameters in this group will define where the input data will be read
# and where the output will be written.
[data_files]
# Components that can will combined to create the full path to the input file.
# The three components will be combined like this:
#    input_path/input_file_start.input_file_extension

# The directory where you will normally keep the input data.
# It is defined separate from the file name since you may want to change the
# file name frequently but always use the same path.
input_path = /home/adam/tmp/csv-data

# The name of the file, without extension, that contains the data that will be
# read.
input_file_name = InventorySearchResults

# Two different input file types are recognize
#     csv - Command Separated Variables
#     xlsx - Excel spreadsheet (Note - old xls files won't work)
#input_file_extension = csv
input_file_extension = xlsx

# If input_file_extension is xlsx then the assumption is that we are working
# with an Excel spreadsheet and this will specify the name of the sheet in
# that file that has the desired data.
input_sheet_name = InventorySearchResults

# Similar to the way that input files will be defined the output file will
# also be defined as three separate elements.  With the result be built like
# this:
#     output_path/output_file_name.output_file_extension

# The directory where you will normally want to place the results of running
# the csv_shuffle.py script.
# It is defined separate from the file name in case you want to change one
# more often than the other.
output_path = /home/adam/tmp/csv-data

# The name of the file, without extension, where the results of the run will
# be placed.
output_file_name = InventorySearchResults-shuffle

# Only one output file type is recognized at this time.
#    csv - Command Separated Variables
output_file_extension = csv

# The character encoding used for the data in the input and output files
character_encoding = utf-8
# Instructs the script what to do if there is data in the input or output
# file that can't be encoded with the defined character_encoding scheme.
character_encoding_errors = backslashreplace

# This is where we define which columns from the input file will be included
# in the output file.
#
# The columns can be defined in three different ways header, letters, and
# indexes.  These will be defined in more detail below but keep in mind that
# if more than one definition is present the system will select one according
# to this priority list.
#     1) indexes
#     2) letters
#     3) headers
# The output indexes will appear in the order they are defined here.  They will
# not be in the same order that they appear in the input.
[data_columns]
# The numerical indexes of the columns that should be extracted from the
# input data.  Keep in mind these are zero based so the first column is zero
# not one.
# If this set of columns is defined all others will be ignored.
#column_indexes = 0
#                 1
#                 5
#                 7
#                 26
#                 4

# The letter designators that spreadsheets give to data columns:
#     (A, B, C, ... Z, AA, AB, AC, ... AZ, BA ...)
# These will be chosen over column headers but not column indexes.
#column_letters = A
#                 B
#                 F
#                 H
#                 AA
#                 E

# The names for the data columns defined in the first row of the input data.
# The values here must exactly match the definitions in the data.  If any
# headers here can't be found in the first row of data in the input file,
# the translation will fail.
# These will only be used if they are the only column definitions present.
column_headers = asset_id
                 tsnumber
                 serialnumber
                 Model
                 datecreated
                 assetGUID
